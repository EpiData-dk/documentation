===========================================
= EpiData Analysis commands and structure =
=========================================== 

EpiData Analysis is  being restructured to accomodate:
1. Support for more operating systems (Linux, Windows and Mac)
2. To use the same core modules as Manager and EntryClient
3. To allow for open source principles when finalized

################################################
## Main differences to EpiData Analysis for Windows in usage:

Warning: do not YET use for real analysis only for testing 

Major highlights and differences at this point:  
0 Many commands are not implemented yet
1 There is NO if after a command  
2 The select command works ONLY on one statement at a time
3 The  new "begin .... end" construct can use the same select for several commands
4 The command formulation is not final - we aim for simplicity

################################################
## Reading and saving data:

read <filename[.ext]>;     * [.ext] indicates type [epx|dta|csv|rec]

save <filename[.ext];      * [.ext] indicates type [epx|dta|csv]

close				

############################
Not implemented yet:
    close [all] ;  * only closes data unless option "all"


################################################
## See data or variables

list data		      # lists data
list var		      # lists variables
list df			      # lists dataforms (crude implementation)
list vl	                      # lists valuelabels 
list results		      # lists resultvariables 
list global		      # lists global non-vector constants



################################################
## Analysis commands:


means <varnames> [!by := "<varname>"] [!t] [!v] [!vl] [!lv] [!l]

count 


## use any command on a given subset (filtered selection) of data: 

select <boolean expression> command ;
   

################################################
## manage output
 
cls ;   * delete all output  


################################################
## special commands for testing

runtest "<directory>"


################################################
## 

####################


new v{ar} <type> := <expression>     <type> is one of i f d s 
new g{lobal} <type> := <expression>
new dataset	# Not implemented yet
new project	# Experimental implementation

<var> := <expression>
<var>[index] := <expression>

? <expression>  # Evaluation command. Outputs the value of the expression. Eg.
		# ? 3 * 5     Outputs = 15
		# ? 3 < 5     Outputs "true"

assert <boolean expression>  [!fail] [!halt]

set

set "<set option name>"
set "<set option name>" := <expression>



## Statement constructs:
########################

begin
  .... commands / statments ....
end;


if <boolean expression> then
  ... command / statement / begin-end     # NOTE: there is no ";" after this statement if ELSE is used.
else
  ... command / statement / begin-end;


select <boolean expression> 
  ... command / statement / begin-end;    # All commands are executed on the filtered set of data.

for <const> := <int expression> to/downto <int expression> do
  ... command / statement / begin-end;    # This sets that const to the value of the first <int expression> and in-/decrements by 1
					    for each loop.



