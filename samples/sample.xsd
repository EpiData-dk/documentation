<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://www.epidata.dk/XML/1.0"
  xmlns="http://www.epidata.dk/XML/1.0"
  elementFormDefault="qualified">
  
  <xs:import
    namespace="http://www.w3.org/XML/1998/namespace"
    schemaLocation="http://www.w3.org/2009/01/xml.xsd"
  />
  
  <!-- Reuseable types. -->
  <xs:simpleType name="FieldType">
    <xs:annotation>
      <xs:documentation>
      <div>
      // Bool  (0)
      ftBoolean = 0,
      
      // Numbers  (1, 2, 3)
      ftInteger, ftAutoInc, ftFloat,
      
      // Date (4, 5, 6)
      ftDMYDate, ftMDYDate, ftYMDDate,
      // (7, 8, 9)
      ftDMYToday, ftMDYToday, ftYMDToday,
      
      // Time (10, 11)
      ftTime, ftTimeNow,
      
      // Strings (12, 13)
      ftString, ftUpperString
      </div>
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="ftBoolean"/>
      <xs:enumeration value="ftInteger"/>
      <xs:enumeration value="ftAutoInc"/>
      <xs:enumeration value="ftFloat"/>
      <xs:enumeration value="ftDMYDate"/>
      <xs:enumeration value="ftMDYDate"/>
      <xs:enumeration value="ftYMDDate"/>
      <xs:enumeration value="ftDMYToday"/>
      <xs:enumeration value="ftMDYToday"/>
      <xs:enumeration value="ftYMDToday"/>
      <xs:enumeration value="ftTime"/>
      <xs:enumeration value="ftTimeNow"/>
      <xs:enumeration value="ftString"/>
      <xs:enumeration value="ftUpperString"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="RecordStatus">
    <xs:annotation>
      <xs:documentation>
        <div>
          Status:
          0 = normal
          1 = verified
          2 = deleted
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="rsNormal"/>
      <xs:enumeration value="rsVerified"/>
      <xs:enumeration value="rsDeleted"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="AutoUpdateMode">
    <xs:annotation>
      <xs:documentation>
        <div>
          Auto Update Mode:
          0 = When created
          1 = On save record
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="umCreated"/>
      <xs:enumeration value="umUpdated"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="FieldComparisonType">
    <xs:annotation>
      <xs:documentation>
        <div>
          Comparison for fields:
          0: Less than ( &lt; )
          1: Less or equal ( &lt;= )
          2: Greater or equal ( &gt;= )
          3: Greater than ( &gt; )
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="fcLT"/>
      <xs:enumeration value="fcLEq"/>
      <xs:enumeration value="fcGEq"/>
      <xs:enumeration value="fcGT"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="JumpType">
    <xs:annotation>
      <xs:documentation>
        <div>
          Jump to types
          0: Save current record and start new.
          1: Exit current section. If in mainsection or last section, behaves as "0".
          2: Skips next field. If last last or second last field, behaves as "0".
          3: Jump to specific field. Field MUST exists!
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="jtSaveRecord"/>
      <xs:enumeration value="jtExitSection"/>
      <xs:enumeration value="jtSkipNextField"/>
      <xs:enumeration value="jtToField"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="JumpResetType">
    <xs:annotation>
      <xs:documentation>
        <div>
          Behaviour for field skipped by jumping over them.
          0: Leave fields as is. 
          1: Insert system missing (empty field).
          2: Insert Max missing value if defined, otherwise default to "leave as is".
          3: Insert 2nd greates missing value (2ndMax) if defined, otherwise default to "leave as is".
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="jrLeaveAsIs"/>
      <xs:enumeration value="jrSystemMissing"/>
      <xs:enumeration value="jrMaxMissing"/>
      <xs:enumeration value="jr2ndMissing"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="LangType" mixed="true">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:complexType>
  
  <xs:complexType name="TextType">
    <xs:sequence>
      <xs:element name="Text" maxOccurs="unbounded" type="LangType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="Caption" type="TextType"/>
  <xs:element name="Notes" type="TextType"/>
  <xs:element name="Question" type="TextType"/>
  
  <xs:complexType name="LabelType" mixed="true">
    <xs:sequence>
      <xs:element name="Label" maxOccurs="unbounded" type="LangType"/>
    </xs:sequence>
    <xs:attribute name="missing" type="xs:boolean"/>
    <xs:attribute name="order" use="required" type="xs:integer"/>
    <xs:attribute name="value" use="required"/>
  </xs:complexType>

  <!-- Basis for schema! EpiData -->
  <xs:element name="EpiData">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Settings"/>
        <xs:element ref="ProjectSettings"/>
        <xs:element ref="Study"/>
        <xs:element ref="ValueLabelSets" minOccurs="0"/>
        <xs:element ref="DataFiles"/>
      </xs:sequence>
      <xs:attribute name="version" use="required" type="xs:integer"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Settings">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="DateSeparator" type="xs:string"/>
        <xs:element name="TimeSeparator" type="xs:string"/>
        <xs:element name="DecimalSeparator" type="xs:string"/>
        <xs:element name="MissingString" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ProjectSettings">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="AutoIncStart" type="xs:integer"/>
        <xs:element name="TimedBackupInterval" type="xs:integer"/>
        <xs:element name="BackupOnShutdown" type="xs:boolean"/>
        <xs:element name="ShowFieldNames" type="xs:boolean"/>
        <xs:element name="ShowFieldBorders" type="xs:boolean"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Study">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Author" type="xs:string"/>
        <xs:element name="Agency" type="xs:string"/>
        <xs:element name="Created" type="xs:string"/>
        <xs:element name="Identifier" type="xs:string"/>
        <xs:element name="KeyWords" type="xs:string"/>
        <xs:element name="Language" type="xs:string"/>
        <xs:element name="Modified" type="xs:string"/>
        <xs:element name="Notes" type="xs:string" minOccurs="0"/>
        <!-- Other languages bør måske være en gentagende type... dvs. flere af dem mulige. (maxOccurance="unbounded") -->
        <xs:element name="OtherLanguages" type="xs:string"/>
        <xs:element name="Version" type="xs:string"/>
        <xs:element name="Abstract" type="TextType" minOccurs="0"/>
        <xs:element name="Citations" type="TextType" minOccurs="0"/>
        <xs:element name="Funding" type="TextType" minOccurs="0"/>
        <xs:element name="GeographicalCoverage" type="TextType" minOccurs="0"/>
        <xs:element name="Publisher" type="TextType" minOccurs="0"/>
        <xs:element name="Purpose" type="TextType" minOccurs="0"/>
        <xs:element name="Population" type="TextType" minOccurs="0"/>
        <xs:element name="Rights" type="TextType" minOccurs="0"/>
        <xs:element name="TimeCoverage" type="TextType" minOccurs="0"/>
        <xs:element name="Title" type="TextType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ValueLabelSets">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ValueLabelSet" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Internal">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValueLabel" maxOccurs="unbounded" type="LabelType"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="id" use="required" type="xs:ID"/>
            <xs:attribute name="type" use="required" type="FieldType"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="DataFiles">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="DataFile">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="Records"/>
              <xs:element name="Version" type="xs:string" minOccurs="0"/>
              <xs:element ref="Caption" minOccurs="0"/>
              <xs:element ref="Sections"/>
            </xs:sequence>
            <xs:attribute name="created" use="required"/>
            <xs:attribute name="id" use="required" type="xs:ID"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Records">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Record" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType mixed="true">
            <xs:attribute name="status" use="required" type="RecordStatus"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Sections">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Section" minOccurs="1" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Caption"/>
              <xs:element ref="Fields"/>
              <xs:element ref="Headings"/>
            </xs:sequence>
            <!-- Inherited attributes (class hierachy) -->
            <xs:attribute name="id" use="required" type="xs:NCName"/>
<!--            <xs:attribute name="name" use="required" type="xs:NCName"/> -->
            <xs:attribute name="top" use="required" type="xs:int"/>
            <xs:attribute name="left" use="required" type="xs:int"/>
            <!-- Required attributes -->
            <xs:attribute name="height" use="required" type="xs:int"/>
            <xs:attribute name="width" use="required" type="xs:int"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Fields">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Field" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <!-- Element created "on the fly" in Core. Hence they written first. -->
              <xs:element minOccurs="0" ref="Calculation"/>
              <xs:element minOccurs="0" ref="Compare"/>
              <xs:element minOccurs="0" ref="Jumps"/>
              <xs:element minOccurs="0" ref="Ranges"/>
              <!-- Elements created using inheritance in this order. -->
              <xs:element minOccurs="0" ref="Notes"/>
              <xs:element minOccurs="0" ref="Question"/>
            </xs:sequence>
            <!-- Inherited attributes (class hierachy) -->
            <xs:attribute name="id" use="required" type="xs:NCName"/>
<!--            <xs:attribute name="name" use="required" type="xs:NCName"/> -->
            <xs:attribute name="top" use="required" type="xs:int"/>
            <xs:attribute name="left" use="required" type="xs:int"/>
            <!-- Required attributes -->
            <xs:attribute name="type" use="required" type="FieldType"/>
            <xs:attribute name="length" use="required" type="xs:int"/>
            <xs:attribute name="decimals" use="required" type="xs:int"/>
            <xs:attribute name="entrymode" use="required" type="xs:int"/>
            <!-- Optional attributes -->
            <xs:attribute name="autoupdatemode" type="AutoUpdateMode"/>
            <xs:attribute name="confirmentry" type="xs:boolean"/>
            <xs:attribute name="defaultvalue" type="xs:string"/>
            <xs:attribute name="forcepicklist" type="xs:boolean"/>
            <xs:attribute name="repeat" type="xs:boolean"/>
            <xs:attribute name="showvaluelabel" type="xs:boolean"/>
            <xs:attribute name="valuelabelref" type="xs:NCName"/>
            <xs:attribute name="valuelabelwritefieldref" type="xs:NCName"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Calculation">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ResultFieldRef" type="xs:NCName"/>
        <xs:choice>
          <xs:sequence>
            <xs:element name="DayFieldRef" type="xs:NCName"/>
            <xs:element name="MonthFieldRef" type="xs:NCName"/>
            <xs:element name="YearFieldRef" type="xs:NCName"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="StartDateRef" type="xs:NCName" minOccurs="0"/>
            <xs:element name="StartTimeRef" type="xs:NCName" minOccurs="0"/>
            <xs:element name="EndDateRef" type="xs:NCName" minOccurs="0"/>
            <xs:element name="EndTimeRef" type="xs:NCName" minOccurs="0"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="Field1Ref" type="xs:NCName" minOccurs="0"/>
            <xs:element name="Field2Ref" type="xs:NCName" minOccurs="0"/>
            <xs:element name="Field3Ref" type="xs:NCName" minOccurs="0"/>
            <xs:element name="Delimiter1" type="xs:string"/>
            <xs:element name="Delimiter2" type="xs:string"/>
          </xs:sequence>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="type" use="required" type="xs:integer"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Compare">
    <xs:complexType>
      <xs:attribute name="tofieldref" use="required" type="xs:NCName"/>
      <xs:attribute name="type" use="required" type="FieldComparisonType"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Ranges">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Range" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="start" use="required" type="xs:string"/>
            <xs:attribute name="end" use="required" type="xs:string"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Jumps">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Jump" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="on" use="required" type="xs:string"/>
            <xs:attribute name="type" use="required" type="JumpType"/>
            <xs:attribute name="reset" use="required" type="JumpResetType"/>
            <xs:attribute name="tofieldref" type="xs:NCName"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Headings">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Heading" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="Caption"/>
            </xs:sequence>
            <!-- Inherited attributes (class hierachy) -->
            <xs:attribute name="id" use="required" type="xs:ID"/>
            <xs:attribute name="top" use="required" type="xs:int"/>
            <xs:attribute name="left" use="required" type="xs:int"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>